#include<stdio.h>
#include<string.h>
//#include<ctype.h>
#define MAXLINES 5000
#define MAXLEN 1000
#define ALLOCSIZE 10000

static char allocbuf[ALLOCSIZE];
static char *allocp=allocbuf;
char *lineptr[MAXLINES];
char *alloc(int);
int readlines(char *lineptr[],int nlines);
void writelines(char *lineptr[],int nlines);
int getline(char *s,int lim);
void qsort(char *lineptr[],int left,int right);
void swap(int *lineptr[],int i,int j);


int main()
{
	int nlines;

	if((nlines=readlines(lineptr,MAXLINES))>=0)
	{
	qsort(lineptr,0,nlines-1);
	writelines(lineptr,nlines);
	return 0;
	}
	else
	{

	printf("error:input too big to sort\n");
	return 1;
	}
}


int getline(char *s,int lim)
{
int c,i;
	for(i=0;i<lim-1 && (c=getchar())!=EOF && c!='\n';++i)
		s[i]=c;
		if(c=='\n')
		{
		 s[i]=c;
		 ++i;
		}
		s[i]='\0';
		return i;

}

int readlines(char *lineptr[],int maxlines)
{
int len,nlines;
char *p,line[MAXLEN];

	nlines=0;
	while((len=getline(line,MAXLEN))>=0)
		if(nlines>=maxlines || (p=alloc(len))==NULL)
			return -1;
		else
		{
		line[len-1]='\0';
		strcpy(p,line);
		lineptr[nlines++]=p;
		}

	return nlines;
}

void writelines(char *lineptr[],int nlines)
{
int i;
	for(i=0;i<nlines;i++)
		printf("%s\n",lineptr[i]);
}

char *alloc(int siz)
{
  if(allocbuf+ALLOCSIZE-allocp>=siz)
	  {	allocp +=siz;
		 return allocp-siz;
		}
  else
		return NULL;
}

void qsort(char *lineptr[],int left,int right)
{
int i,last;
void swap(int *lineptr[],int i,int j);
if(left>=right)
	return;

swap(lineptr,left,(left+right)/2);
last=left;
for(i=left+1;i<=right;i++)
	if(lineptr[i]<lineptr[left])
		swap(lineptr,++last,i);
swap(lineptr,left,right);
qsort(lineptr,left,last-1);
qsort(lineptr,left+1,right);
}

void swap(int *lineptr[],int i,int j)
{
int temp;
temp=lineptr[i];
lineptr[i]=lineptr[j];
lineptr[j]=temp;
}




